p1 <- FeaturePlot(merged_seurat_filtered, features = c('Apoe'), split.by = 'Genotype') #min.cutoff = 'q50'
p2 <- DimPlot(merged_seurat_filtered, reduction = 'umap', split.by = 'Genotype')
p1
p2
### Compare between Genotype
p1 <- FeaturePlot(merged_seurat_filtered, features = c('Isg15'), split.by = 'Genotype') #min.cutoff = 'q50'
p2 <- DimPlot(merged_seurat_filtered, reduction = 'umap', split.by = 'Genotype')
p1
p2
markers_cluster3
View(markers_cluster3)
markers_clusters3$WT_diff <- markers_cluster3$WT_pct.1 - markers_cluster3$WT_pct.2
markers_cluster3$WT_diff <- markers_cluster3$WT_pct.1 - markers_cluster3$WT_pct.2
markers_cluster3$KO_diff <- markers_cluster3$KO_pct.1 - markers_cluster3$KO_pct.2
df3 <- markers_cluster3[,markers_cluster3$WT_diff > 0.5 & markers_cluster3$KO_diff>0.5]
df3 <- markers_cluster3[, (markers_cluster3$WT_diff > 0.5) & (markers_cluster3$KO_diff > 0.5)]
df3 <- markers_cluster3[(markers_cluster3$WT_diff > 0.5) & (markers_cluster3$KO_diff > 0.5),]
View(df3)
### Compare between Genotype
p1 <- FeaturePlot(merged_seurat_filtered, features = c('Tmsb4x'), split.by = 'Genotype') #min.cutoff = 'q50'
p2 <- DimPlot(merged_seurat_filtered, reduction = 'umap', split.by = 'Genotype')
p1
p2
### Compare between Genotype
p1 <- FeaturePlot(merged_seurat_filtered, features = c('Rps11'), split.by = 'Genotype') #min.cutoff = 'q50'
p2 <- DimPlot(merged_seurat_filtered, reduction = 'umap', split.by = 'Genotype')
p1
p2
rm(list = ls())
ngl.gene.counts.list <- readRDS("~/OneDrive - University of Maryland School of Medicine/mgss2/RDS_files/ngl.gene.counts.list.RDS")
ngl.gene.counts.list.mgSs.pa.clean <- readRDS("~/OneDrive - University of Maryland School of Medicine/mgss2/RDS_files/ngl.gene.counts.list.mgSs.pa.clean.RDS")
View(ngl.gene.counts.list.mgSs.pa.clean)
i <- "S5.A14a_sp000758905"
S5.A14.ngl.gene.counts <- readRDS("/Volumes/Scratch/amaros/mgss2/S5.A14.ngl.gene.counts.RDS")
View(ngl.gene.counts.list.mgSs.pa.clean)
View(S5.A14.ngl.gene.counts)
gen.sizes.sum <- readRDS("/Volumes/Scratch/amaros/mgss2/RDS_files/gen.sizes.sum.RDS")
View(gen.sizes.sum)
grepl("S5.A14a_sp000758905", gene.sizes.sum)
grepl("S5.A14a_sp000758905", gen.sizes.sum)
grepl("S5.A14a_sp000758905", gen.sizes.sum$taxonomy)
sum(grepl("S5.A14a_sp000758905", gen.sizes.sum$taxonomy))
library(ExperimentHub)
library(Seurat)
library(DESeq2)
library(tidyverse)
sesu.filtered <- readRDS("/Users/amaros/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/ScRNAseq/merged_seurat_filtered.RDS")
# visualize
cell_plot <- DimPlot(seu.filtered, reduction = 'umap', group.by = 'cell', label = TRUE)
cond_plot <- DimPlot(seu.filtered, reduction = 'umap', group.by = 'stim')
seu.filtered <- readRDS("/Users/amaros/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/ScRNAseq/merged_seurat_filtered.RDS")
# visualize
cell_plot <- DimPlot(seu.filtered, reduction = 'umap', group.by = 'cell', label = TRUE)
# visualize
cond_plot <- DimPlot(seu.filtered, reduction = 'umap', group.by = 'Genotype')
cell_plot|cond_plot
# visualize
cond_plot <- DimPlot(seu.filtered, reduction = 'umap', group.by = 'Genotype')
cond_plot
View(seu.filtered@meta.data)
DefaultAssay(seu.filtered)
cts <- AggregateExpression(seu.filtered,
group.by = "Genotype",
assays = 'originalexp',
slot = "counts",
return.seurat = FALSE)
cts <- AggregateExpression(seu.filtered,
group.by = "Genotype",
assays = 'RNA',
slot = "counts",
return.seurat = FALSE)
cts <- cts$originalexp
View(xcts)
View(cts)
str(seu.filtered)
rm(lsit - ls())
rm(list - ls())
rm(lsit = ls())
rm(list = ls())
### readRDS to avoid run all the code above
merged_seurat_filtered <- readRDS("merged_seurat_filtered.RDS")
library(Seurat)
library(tidyverse)
library(patchwork)
library(DoubletFinder)
library(harmony)
library(ggplot2)
library(gridExtra)
### readRDS to avoid run all the code above
merged_seurat_filtered <- readRDS("merged_seurat_filtered.RDS")
# visualize data
clusters <- DimPlot(merged_seurat_filtered, reduction = 'umap', group.by = 'seurat_clusters', label = TRUE)
condition <- DimPlot(merged_seurat_filtered, reduction = 'umap', group.by = 'Genotype')
condition|clusters
merged_seurat_filtered[['RNA']] <- JoinLayers(merged_seurat_filtered[['RNA']])
# findConserved markers -------------
# Notes:
# slot depends on the type of the test used,
# default is data slot that stores normalized data
# DefaultAssay(merged_seurat_filtered) <- 'RNA'
DefaultAssay(merged_seurat_filtered)
markers_cluster0 <- FindConservedMarkers(merged_seurat_filtered,
ident.1 = 0,
grouping.var = 'Genotype')
markers_cluster1 <- FindConservedMarkers(merged_seurat_filtered,
ident.1 = 1,
grouping.var = 'Genotype')
markers_cluster2 <- FindConservedMarkers(merged_seurat_filtered,
ident.1 = 2,
grouping.var = 'Genotype')
markers_cluster3 <- FindConservedMarkers(merged_seurat_filtered,
ident.1 = 3,
grouping.var = 'Genotype')
View(merged_seurat_filtered)
markers_cluster3
head(rownames(markers_cluster3))
list(head(rownames(markers_cluster3)))
c(head(rownames(markers_cluster3)))
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0)),head(rownames(markers_cluster1)),head(rownames(markers_cluster2)),head(rownames(markers_cluster3)))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "Genotype") +
RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0))))
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0)))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "Genotype") +
RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "Genotype") +
RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),50))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "Genotype") +
RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype") +
RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),30))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype") +
RotatedAxis()
install.packages("cowplot")
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
aggregate_ifnb <- AggregateExpression(ifnb, group.by = c("seurat_clusters", "Genotype"), return.seurat = TRUE)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
aggregate_ifnb <- AggregateExpression(merged_seurat_filtered, group.by = c("seurat_clusters", "Genotype"), return.seurat = TRUE)
genes.to.label = c("Slc40a1", "Slc48a1", "Hbb-bt", "Ubb", "Hmox1", "Gypa", "Tfrc")
p1 <- CellScatter(aggregate_ifnb, "WT", "KO", highlight = genes.to.label)
View(aggregate_ifnb)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
aggregate_ifnb <- AggregateExpression(merged_seurat_filtered, group.by = c("seurat_clusters", "Genotype"), return.seurat = TRUE)
genes.to.label = c("Slc40a1", "Slc48a1", "Hbb-bt", "Ubb", "Hmox1", "Gypa", "Tfrc")
p1 <- CellScatter(aggregate_ifnb, "g0_KO", "g0_WT", highlight = genes.to.label)
p2 <- LabelPoints(plot = p1, points = genes.to.label, repel = TRUE)
p3 <- CellScatter(aggregate_ifnb, "g1_KO", "g1_WT", highlight = genes.to.label)
p4 <- LabelPoints(plot = p3, points = genes.to.label, repel = TRUE)
p2
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
aggregate_ifnb <- AggregateExpression(merged_seurat_filtered, group.by = c("seurat_clusters", "Genotype"), return.seurat = TRUE)
genes.to.label = c("Slc40a1", "Slc48a1", "Hbb-bt", "Ubb", "Hmox1", "Gypa", "Tfrc")
p1 <- CellScatter(aggregate_ifnb, "g0_KO", "g0_WT", highlight = genes.to.label)
p2 <- LabelPoints(plot = p1, points = genes.to.label, repel = TRUE)
p3 <- CellScatter(aggregate_ifnb, "g1_KO", "g1_WT", highlight = genes.to.label)
p4 <- LabelPoints(plot = p3, points = genes.to.label, repel = TRUE)
p2+p4
ifnb$celltype.genotype <- paste(ifnb$seurat_clusters, ifnb$genotype, sep = "_")
merged_seurat_filtered$celltype.genotype <- paste(merged_seurat_filtered$seurat_clusters, merged_seurat_filtered$genotype, sep = "_")
merged_seurat_filtered$celltype.genotype <- paste(merged_seurat_filtered$seurat_clusters, merged_seurat_filtered$Genotype, sep = "_")
Idents(merged_seurat_filtered) <- "celltype.genotype"
b.interferon.response <- FindMarkers(merged_seurat_filtered, ident.1 = "B_STIM", ident.2 = "B_CTRL", verbose = FALSE)
View(merged_seurat_filtered)
merged_seurat_filtered$celltype.genotype <- paste(merged_seurat_filtered$seurat_clusters, merged_seurat_filtered$Genotype, sep = "_")
Idents(merged_seurat_filtered) <- "celltype.genotype"
b.interferon.response <- FindMarkers(merged_seurat_filtered, ident.1 = "0_WT", ident.2 = "0_KO", verbose = FALSE)
head(b.interferon.response, n = 15)
plot(b.interferon.response$avg_log2FC, b.interferon.response$p_val_adj)
y = -10*log10(b.interferon.response$p_val_adj)
plot(b.interferon.response$avg_log2FC, y)
FeaturePlot(ifnb, features = c("Slc40a1", "Gypa", "Hbb-bt"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Slc40a1", "Gypa", "Hbb-bt"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Slc40a1"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Slc48a1"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("S100a9"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("S100a9","S100a8"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
head(b.interferon.response, n = 30)
FeaturePlot(merged_seurat_filtered, features = c("Ppp1cb"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Igkc"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
merged_seurat_filtered$celltype.genotype <- paste(merged_seurat_filtered$seurat_clusters, merged_seurat_filtered$Genotype, sep = "_")
Idents(merged_seurat_filtered) <- "celltype.genotype"
b.interferon.response <- FindMarkers(merged_seurat_filtered, ident.1 = "1_WT", ident.2 = "1_KO", verbose = FALSE)
head(b.interferon.response, n = 30)
FeaturePlot(merged_seurat_filtered, features = c("Gm49980"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Eif1"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Epb41"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Ppp1cb"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Gng5"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Fech"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Tmtc2"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
merged_seurat_filtered$celltype.genotype <- paste(merged_seurat_filtered$seurat_clusters, merged_seurat_filtered$Genotype, sep = "_")
Idents(merged_seurat_filtered) <- "celltype.genotype"
b.interferon.response <- FindMarkers(merged_seurat_filtered, ident.1 = "2_WT", ident.2 = "2_KO", verbose = FALSE)
head(b.interferon.response, n = 100)
head(b.interferon.response, n = 100)
FeaturePlot(merged_seurat_filtered, features = c("Slc15a2"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Trim58"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Mrc1"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Ucp2"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
y = -10*log10(b.interferon.response$p_val_adj)
plot(b.interferon.response$avg_log2FC, y)
df <- b.interferon.response[order(b.interferon.response$avg_log2FC), ]
head(df)
FeaturePlot(merged_seurat_filtered, features = c("C77080"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
df <- b.interferon.response[order(b.interferon.response$avg_log2FC), ]
df <- df[df$pct.1 > 0.05]
df <- b.interferon.response[order(b.interferon.response$avg_log2FC), ]
df <- df[df$pct.1 > 0.05,]
head(df)
FeaturePlot(merged_seurat_filtered, features = c("Nsmce2"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
df <- b.interferon.response[order(b.interferon.response$avg_log2FC), ]
df <- df[df$pct.1 > 0.05,]
head(df,20)
FeaturePlot(merged_seurat_filtered, features = c("Cenph"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("Mast2"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
df <- b.interferon.response[order(b.interferon.response$avg_log2FC), ]
df <- df[df$pct.1 > 0.05,]
tail(df,20)
FeaturePlot(merged_seurat_filtered, features = c("Mrc1"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
FeaturePlot(merged_seurat_filtered, features = c("mt-Co2"), split.by = "Genotype", max.cutoff = 3, cols = c("grey",
"red"), reduction = "umap")
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),50))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 4, split.by = "Genotype")
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 4, split.by = "Genotype")
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 4, split.by = "Genotype") + RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster0),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype") + RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster2),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype") + RotatedAxis()
### readRDS to avoid run all the code above
merged_seurat_filtered <- readRDS("merged_seurat_filtered.RDS")
merged_seurat_filtered[['RNA']] <- JoinLayers(merged_seurat_filtered[['RNA']])
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster2),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype") + RotatedAxis()
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster2),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype")
# NEEDS TO BE FIXED AND SET ORDER CORRECTLY
Idents(merged_seurat_filtered) <- factor(Idents(merged_seurat_filtered), levels = c("0", "1", "2", "3"))
markers.to.plot <- c(head(rownames(markers_cluster2),20))
DotPlot(merged_seurat_filtered, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 5, split.by = "Genotype") + RotatedAxis()
samples.hc2 <- readRDS("~/Desktop/samples.hc2.RDS")
samples.hc2 <- readRDS("~/Desktop/samples.hc2.RDS")
View(samples.hc2)
denro <- list()
for (i in names(samples.hc2)){}
for (i in names(samples.hc2)){
denro[[i]] <- as.dendrogram(samples.hc2[[i]])
}
View(denro)
denro <- list()
for (i in names(samples.hc2)){
plot(as.dendrogram(samples.hc2[[i]]))
}
genes <- readRDS("~/OneDrive - University of Maryland School of Medicine/mgss3/Split_genes_ngl/genes.RDS")
sum(is.na(genes))
dim(genes)
library(readr)
part_1 <- read_csv("OneDrive - University of Maryland School of Medicine/mgss3/Split_genes_ngl/part_1.csv")
a<-which(names(genes) %in% "Taxa")
View(genes)
str(genes)
head(names(genes), 5)
library(readr)
part_1 <- read_csv("OneDrive - University of Maryland School of Medicine/mgss3/Split_genes_ngl/part_1.csv")
library(readr)
output_chunk_aa <- read_csv("OneDrive - University of Maryland School of Medicine/mgss3/Split_genes_ngl/output_chunk_aa.csv")
View(output_chunk_aa)
rm(genes)
rm(output_chunk_aa)
rm(list = ls())
dataframes_list <- readRDS("~/OneDrive - University of Maryland School of Medicine/mgss3/Split_genes_ngl/dataframes_list.RDS")
ll
setwd("~/OneDrive - University of Maryland School of Medicine/mgss3/Streamlit")
source("R_script/00_importation.R")
ngl.abund.clusters.cast <- readRDS("R_script/ngl.abund.clusters.cast.RDS")
mgCST.hclust <- readRDS("R_script/mgCST.hclust.RDS")
mgCST.dist <- readRDS("R_script/mgCST.dist.RDS")
relabund<-ngl.abund.clusters.cast/rowSums(ngl.abund.clusters.cast)
mgCSTs.sort.df <- read_csv("Data/mgCST_sort_color.csv")
mgCSTs.samples.df <-read_csv("Data/mgCST_samples_color.csv")
subspecies.with.colors <- read_csv("Data/subspecies_with_colors.csv")
subspecies.with.colors$Subspecies <- gsub("\\.", "_", subspecies.with.colors$Subspecies)
deepsplit <- 4
mincluster <- 10
# Use subset to filter the data
mgCSTs.samples <- subset(mgCSTs.samples.df, deepSplit == deepsplit & minClusterSize == mincluster)
mgCSTs.sort <- subset(mgCSTs.sort.df, deepSplit == deepsplit & minClusterSize == mincluster)
View(mgCSTs.sort)
mgCST <- mgCSTs.sort[, c("mgCST", "color_mgCST")]
names(mgCST)<-c("mgCST", "color")
View(mgCST)
colfunc <- colorRampPalette(c("khaki", "limegreen", "darkslategray1", "mediumblue", "magenta", "red"))
relabund.mgCST<-relabund[,1:n]
## order relabund table by most abundant taxon plus mgss's
test<-names(relabund[order(colSums(relabund), decreasing = TRUE)])
test.s<- unique(substr(test,1,nchar(test)-2))
taxon.order<-c()
for (i in test.s)
{
l<-names(relabund[grep(pattern = i, names(relabund))])
taxon.order<-append(taxon.order, l, after = length(taxon.order))
}
taxon.order<-unique(taxon.order)
relabund.s<-relabund[taxon.order]
l<-as.vector(table(sort(as.numeric(mgCST.hclust$order))))
colfunc <- colorRampPalette(c("khaki", "limegreen", "darkslategray1", "mediumblue", "magenta", "red"))
names(relabund.s)<-gsub(x=names(relabund.s), pattern = "_", replacement = " ")
relabund.mgCST<-relabund[,1:n]
relabund<-ngl.abund.clusters.cast/rowSums(ngl.abund.clusters.cast)
n<-ncol(relabund)
mgCST <- mgCSTs.sort[, c("mgCST", "color_mgCST")]
names(mgCST)<-c("mgCST", "color")
colfunc <- colorRampPalette(c("khaki", "limegreen", "darkslategray1", "mediumblue", "magenta", "red"))
relabund.mgCST<-relabund[,1:n]
relabund.mgCST<-relabund.mgCST[,order(colSums(relabund.mgCST), decreasing = TRUE)]
relabund.mgCST$mgCST<-gsub("mgCST ", "", relabund$mgCST)
View(relabund)
relabund<-ngl.abund.clusters.cast/rowSums(ngl.abund.clusters.cast)
## order relabund table by most abundant taxon plus mgss's
test<-names(relabund[order(colSums(relabund), decreasing = TRUE)])
test.s<- unique(substr(test,1,nchar(test)-2))
taxon.order<-c()
for (i in test.s)
{
l<-names(relabund[grep(pattern = i, names(relabund))])
taxon.order<-append(taxon.order, l, after = length(taxon.order))
}
taxon.order<-unique(taxon.order)
relabund.s<-relabund[taxon.order]
l<-as.vector(table(sort(as.numeric(mgCST.hclust$order))))
colfunc <- colorRampPalette(c("khaki", "limegreen", "darkslategray1", "mediumblue", "magenta", "red"))
names(relabund.s)<-gsub(x=names(relabund.s), pattern = "_", replacement = " ")
dtc.df <- as.data.frame(mgCSTs.samples[c('dtc', 'sampleID')])
mgCST <- mgCSTs.sort[,c('mgCST', "color_mgCST")]
z<-rownames(relabund)
z.1<-z[order.dendrogram(as.dendrogram(mgCST.hclust))]
rownames(mgCSTs.samples)<-mgCSTs.samples$sampleID
mgCSTs.samples<-mgCSTs.samples[z.1,]
mgCSTs.samples<-mgCSTs.samples[order(mgCSTs.samples$mgCST),]
relabund.s<-relabund[mgCSTs.samples$sampleID, taxon.order]
# Capture date for output
today <- strsplit(date(), " ")
month <- today[[1]][2]
if(today[[1]][3] %in% ""){
day <- today[[1]][4]
year <- today[[1]][6]
}else{
day <- today[[1]][3]
year <- today[[1]][5]
}
today2 <- paste(day,month,year, sep="")
pdf(paste(wd, "/mgCST_heatmap_", today2, ".pdf", sep=""), width=7, height=10)
wd<-getwd()
pdf(paste(wd, "/mgCST_heatmap_", today2, ".pdf", sep=""), width=7, height=10)
gplots::heatmap.2(t(as.matrix(relabund.mgCST[,1:50])), Colv = FALSE, Rowv = FALSE, col=colfunc(100), keysize= 1.0, densadj=0, density.info='none', key = TRUE, key.ylab=NA, key.title=NA, key.ytickfun=NA, key.xlab="Relative Abundance", trace="none", cexRow = 0.7, cexCol = 0.1, adjRow = c(1, NA),offsetRow = -38,  main = paste("mgCST Heatmap\nnSamples=", paste(nrow(relabund))), title(main = paste("mgCST Heatmap\nnSamples=", paste(nrow(relabund))), line = -2), ColSideColors = as.vector(relabund.mgCST[["color"]]), lhei = c(1,7), dendrogram = "none")
relabund<-ngl.abund.clusters.cast/rowSums(ngl.abund.clusters.cast)
n<-ncol(relabund)
mgCST <- mgCSTs.sort[, c("mgCST", "color_mgCST")]
names(mgCST)<-c("mgCST", "color")
relabund[["mgCST"]]<-colnames(relabund[,m:which(colnames(relabund) %in% "mgCST 45")])[apply(relabund[,m:which(colnames(relabund) %in% "mgCST 45")],1,which.max)]
relabund<-ngl.abund.clusters.cast/rowSums(ngl.abund.clusters.cast)
n<-ncol(relabund)
mgCST <- mgCSTs.sort[, c("mgCST", "color_mgCST")]
names(mgCST)<-c("mgCST", "color")
## for each mgCST measure the similarity of each sample to each mgCST centroid using yue + clayton theta
# for(i in 1:45){
#   mgCST<-paste("mgCST", i, sep=" ")
#   relabund[[mgCST]]<-apply(relabund[,1:n], 1, function(x) yue_distance(x, reference_centroids[mgCST,]))
# }
m<-n+1
relabund[["mgCST"]]<-colnames(relabund[,m:which(colnames(relabund) %in% "mgCST 45")])[apply(relabund[,m:which(colnames(relabund) %in% "mgCST 45")],1,which.max)]
View(mgCSTs.samples)
relabund<-ngl.abund.clusters.cast/rowSums(ngl.abund.clusters.cast)
mgCSTs.sort.df <- read_csv("Data/mgCST_sort_color.csv")
mgCSTs.samples.df <-read_csv("Data/mgCST_samples_color.csv")
subspecies.with.colors <- read_csv("Data/subspecies_with_colors.csv")
subspecies.with.colors$Subspecies <- gsub("\\.", "_", subspecies.with.colors$Subspecies)
deepsplit <- 4
minclustersize <- 10
# Use subset to filter the data
mgCSTs.samples <- subset(mgCSTs.samples.df, deepSplit == deepsplit & minClusterSize == mincluster)
mgCSTs.sort <- subset(mgCSTs.sort.df, deepSplit == deepsplit & minClusterSize == mincluster)
## order relabund table by most abundant taxon plus mgss's
test<-names(relabund[order(colSums(relabund), decreasing = TRUE)])
test.s<- unique(substr(test,1,nchar(test)-2))
taxon.order<-c()
for (i in test.s)
{
l<-names(relabund[grep(pattern = i, names(relabund))])
taxon.order<-append(taxon.order, l, after = length(taxon.order))
}
taxon.order<-unique(taxon.order)
relabund.s<-relabund[taxon.order]
l<-as.vector(table(sort(as.numeric(mgCST.hclust$order))))
colfunc <- colorRampPalette(c("khaki", "limegreen", "darkslategray1", "mediumblue", "magenta", "red"))
names(relabund.s)<-gsub(x=names(relabund.s), pattern = "_", replacement = " ")
dtc.df <- as.data.frame(mgCSTs.samples[c('dtc', 'sampleID')])
mgCST <- mgCSTs.sort[,c('mgCST', "color_mgCST")]
color_mgcst <- mgCST$color_mgCST
# color_mgcst <- character()
# for (element in mgCSTs.samples$mgCST){
#   color_mgcst <- append(color_mgcst, as.character(mgCST[mgCST$mgCST == element, "color_mgCST"]))
# }
# color_mgcst
mgCSTs.samples$color_mgCST <- color_mgcst
mgCST <- mgCSTs.sort[,c('mgCST', "color_mgCST")]
color_mgcst <- character()
for (element in mgCSTs.samples$mgCST){
color_mgcst <- append(color_mgcst, as.character(mgCST[mgCST$mgCST == element, "color_mgCST"]))
}
# color_mgcst
mgCSTs.samples$color_mgCST <- color_mgcst
z<-rownames(relabund)
z.1<-z[order.dendrogram(as.dendrogram(mgCST.hclust))]
rownames(mgCSTs.samples)<-mgCSTs.samples$sampleID
mgCSTs.samples<-mgCSTs.samples[z.1,]
mgCSTs.samples<-mgCSTs.samples[order(mgCSTs.samples$mgCST),]
relabund.s<-relabund[mgCSTs.samples$sampleID, taxon.order]
colsidecolor <- mgCSTs.samples$color_mgCST # to display the color of samples by mgCST
pdf("Medias/mgCST_heatmap.pdf", width=10, height=10)
gplots::heatmap.2(t(as.matrix(relabund.s[,1:200])),
Colv = FALSE,
Rowv = FALSE,
col=colfunc(300),
labRow = NULL,
labCol = FALSE,
keysize= 1.0,
densadj=0,
density.info='none',
key = FALSE,
key.ylab=NA,
key.title=NA,
key.ytickfun=NA,
key.xlab="Relative Abundance",
trace="none",
cexRow = 0.5, cexCol = 0.1, adjRow = c(1, NA), offsetRow = -56.5,
main = paste("mgCSTs JSD, Ward linkage HC, nSamples=", paste(nrow(relabund.s))),
ColSideColors = colsidecolor,
title(main = paste("mgCSTs JSD, Ward linkage HC, nSamples=", paste(nrow(relabund.s))), line = -2))
legend("top", ncol = 5,
# legend = mgCST$mgCST,
legend = mgCSTs.sort$domTaxa,
col = mgCSTs.sort$color_mgCST,
lty= 1, lwd = 4, cex=.5, bty="n", title = "mgCSTs")
dev.off()
print("Rscript has run")
